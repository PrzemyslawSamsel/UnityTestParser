import subprocess
import argparse
from os.path import join
import xml.etree.ElementTree as ET
from datetime import datetime

### Original command - example of running tests for example project on Unity 2018.3.2f1
# "C:\Program Files\Unity\Hub\Editor\2018.3.2f1\Editor\Unity.exe" -batchmode -projectPath "C:\Users\PrzemyslawSamsel\OneDrive - Apptimia Sp. z o.o\Documents\Crashteroids-project-files\Crashteroids\Crashteroids Starter" -runTests -testPlatform playmode

# Consts
# docs: https://docs.unity3d.com/530/Documentation/Manual/testing-editortestsrunner.html
hub_path_windows = r'C:\Program Files\Unity\Hub\Editor'

# Test Case tags
tcattrs = [
        ("TestID", "id"), 
        ("Name", "fullname"),
        ("Method", "methodname"),
        ("Duration", "duration"),
        ("Asserts", "asserts"),
        ("Result", "result")
]
# Separators for test case and testsuite
septc = "{:-^50}".format('')
septs = "{:#^50}".format('')

# Test run aligns and header
algl  = "{:<17}" # align left
algr  = "{:>28}" # align right
alght = "\n{:*^50}\n" # align header top
alghb = "{:-^50}"     # align header bottom
trheader = "test-run" # test-run header

# Test run attributes
trattrs = [
        ("TC Count:", "testcasecount"),
        ("TC Passed:", "passed"),
        ("TC Failed:", "failed"),
        ("Duration:", "duration"),
]

#TODO: print failure message
# implement progress bar while waiting for tests

def prepare_args():
  parser = argparse.ArgumentParser(description=\
          'Automate Unity Testing from commandline')
  parser.add_argument('-v', '--unityver', type=str, 
          default='2018.3.2f1', help='Version of Unity')
  parser.add_argument('-b', '--unitybasedir', type=str,
          default=hub_path_windows, help='Base dir of all versions of Unity')
  parser.add_argument('-p', '--projpath', type=str, 
          help='Full path of project to be tested', required=False) #TODO => test (True)
  parser.add_argument('-t', '--testtype', type=str, 
          default='play', choices=['play, editor'], help='Run either editor or playmode tests')
  parser.add_argument('-o', '--outfile', 
          help='Path to results XML file exported after tests'
               'by Unity. Default location is project folder') # default output file option see below
  args = parser.parse_args()
  
  # Path to unity executable
  args.unity_exec_path = join(args.unitybasedir, args.unityver, 'Editor', 'Unity.exe')
  # Used to not spawn graphical UI 
  args.batch = '-batchmode'
  # Project path to be debugged
  args.ppath = '-projectPath'
  # Arguments passed to specific type of tests
  args.test_args = []
  # Output file
  args.output = ['-editorTestsResultFile']

  #TODO: Just for testing:
  args.projpath = r"C:\Users\PrzemyslawSamsel\OneDrive - Apptimia Sp. z o.o\Documents\Crashteroids-project-files\Crashteroids\Crashteroids Starter"
    
  # Test output file - user defined
  if args.outfile:
  # Output file for results
    args.output += [args.outfile]
  # Test output file - default path (project)
  else:
    # TODO => only testing 
    filename = "TestResults-637497000092310934.xml" #'TestResults-637496073708155152.xml'
    #filename = 'TestResults-' + datetime.now().strftime('%d%m%Y%H%M%S') + '.xml' 
    args.output += [join(args.projpath, filename)]
  
  # Run tests in either playmode (chosing playmode platform) or editor tests
  if args.testtype == 'play':
      test_type = '-runTests'
      test_platform = '-testPlatform'
      mode = 'playmode'
      args.test_args = [test_type, test_platform, mode]
  elif args.testtype == 'editor':
      test_type = '-runEditorTests'
      args.test_args = [test_type]

  
  return args
#

# Run unity exec with proper parameters
def run_unitytests(args):
  #print(args.unity_exec_path, args.batch, args.ppath, args.projpath, *args.test_args, *args.output)
  #exit()
  process = subprocess.Popen([args.unity_exec_path, args.batch, args.ppath, args.projpath] + args.test_args, #+ #args.output,
                     stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
  stdout, stderr = process.communicate()
  print(stdout, stderr)
#
"""
Pare XML document generated by Unity. In general, structure of this doc is similar to:
<test-run>
   <test-suite type=TestSuite>
        <test-suite type=Assembly>
           <properties>
           </properties>
           <test-suite type=TestFixture>
               <===# Listing of all test cases #===>
           </test-suite>
           <test-suite type=TestFixture>
                <===# Listing of all test cases #===>
           </test-suite>
                (...)
        </test-suite>
   </test-suite>
</test-run>

This structure is important, bcoz this function looks for any test-suite tags
with type attribute of value TestFixture, and then it parses all test cases one by one
"""
def parse_tests_results():
    tsheader = "test-suites"
    algtrht  = "{:*^50}"
    algtrhb  = "{:-^50}"

    # Test document root handle
    htest = ET.parse(args.output[1]).getroot()
    
    # Test Run (general stats)
    parse_test_run(htest)

    # Specific Test Suites
    print(alght.format(tsheader) + alghb.format(''))
    for testsuite in htest.findall(".//test-suite[@type='TestFixture']"):
        print(septs)
        print("{:<19}".format("Test name:"), "{:>30}".format(testsuite.attrib['fullname']))
        print("{:<19}".format("Testcase count:"), "{:>30}".format(testsuite.attrib['testcasecount']))
        print("{:<19}".format("Result:"), "{:>30}".format(testsuite.attrib['result']))
        print("{:<19}".format("Start time:"), "{:>30}".format(testsuite.attrib['start-time']))
        print("{:<19}".format("End time:"), "{:>30}".format(testsuite.attrib['end-time']))
        print("{:<19}".format("Duration:"), "{:>30}".format(testsuite.attrib['duration']))
        print("{:-^50}".format(''))
        print("{:#^50}".format(' test cases '))
        parse_test_cases(testsuite.findall("./test-case"))

def parse_test_cases(tests):
        for test in tests:
                for attr in tcattrs:
                        print("{:<12}".format(f"# {attr[0]}:"), 
                              "{:<12}".format(f"{test.attrib[attr[1]]}"))
                print(septc)

def parse_test_run(htest):
    # Header
    print(alght.format(trheader) + alghb.format(''))
    # Attributes of Test Run
    for attr in trattrs:
        val = htest.attrib[attr[1]]
        print("* " + algl.format(attr[0]), algr.format(val) + " *")
    # Bottom header
    print(alghb.format('') + alght.format(''), end="")

if __name__ == '__main__':
    args = prepare_args() 
    #run_unitytests(args)
    parse_tests_results()
